replicaCount: 1

kind: Deployment

updateStrategy: {}

image:
  repository: notdefined
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""
commandOverride: ""
containerNameOverride: ""

config:
  volumeEnabled: true
  volumeMountEnabled: true

loggingConfig:
  immutable: true
  enabled: false
  checksum: true
  filename: "logback.xml"
  path: /opt/docker/conf
  contents: ""

appConfig:
  immutable: true
  enabled: false
  checksum: true
  filename: "startup.conf"
  path: /opt/docker/conf
  contents: ""
  values: {}

java:
  jdwp:
    enabled: false
    port: 5005
  resources: {}
  resourcesWithJFlag: true

extraArgs: []
extraVolumes: []
extraVolumeMounts: []
extraContainers: []
extraInitContainers: []
extraConfigmaps: {}

secret:
  labels: {}

env:
  open: {}
  field: {}
  secret: {}
  existingSecret:
  existingSecretMappings: {}

configmaps: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

annotations: {}

podAnnotations: {}

# Specify to use specific priorityClass for pods
# ref: https://kubernetes.io/docs/concepts/configuration/pod-priority-preemption/
# If a Pod cannot be scheduled, the scheduler tries to preempt (evict) lower priority
# Pods to make scheduling of the pending Pod possible.
priorityClassName: ""

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

livenessProbe:
  enabled: true
  # command:
  # - ls
  # monitorPath: /
  # initialDelaySeconds: 0
  # periodSeconds: 10
  # timeoutSeconds: 1
  # successThreshold: 1
  # failureThreshold: 3

readinessProbe:
  enabled: true
  # command:
  # - ls
  # monitorPath: /
  # initialDelaySeconds: 0
  # periodSeconds: 10
  # timeoutSeconds: 1
  # successThreshold: 1
  # failureThreshold: 3

startupProbe:
  enabled: false
  # command:
  # - ls
  # monitorPath: /
  # initialDelaySeconds: 0
  # periodSeconds: 10
  # timeoutSeconds: 1
  # successThreshold: 1
  # failureThreshold: 3

hostAliases: []

port: 9000

service:
  enabled: true
  type: ClusterIP
  ports:
    - port: 80
      name: http
      # targetPort: 9000 # defaults to .Values.port
      protocol: TCP

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
      - path: /
        backend:
          serviceName: chart-example.local
          servicePort: 80
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local
  proxy:
    enabled: false
    annotations: {}
      # kubernetes.io/ingress.class: nginx
      # kubernetes.io/tls-acme: "true"
    hosts:
      - host: chart-example.local
        paths:
        - path: /
          backend:
            serviceName: chart-example.local
            servicePort: 80
    tls: []
    #  - secretName: chart-example-tls
    #    hosts:
    #      - chart-example.local

extraIngress: []

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

terminationGracePeriodSeconds: 30
hostNetwork: false
dnsPolicy: ClusterFirst

dnsConfig: {}
#   nameservers:
#     - 1.2.3.4
#   searches:
#     - ns1.svc.cluster-domain.example
#     - my.dns.search.suffix
#   options:
#     - name: ndots
#       value: "2"
#     - name: edns0

hostAliases: []
#   - ip: "1.2.3.4"
#     hostnames:
#     - "foo.local"
#     - "bar.local"

volumeClaimTemplates: []

persistentVolumeClaim: {}

rbac:
  clusterRole:
    create: false
    spec: {}
    annotations: {}
  clusterRoleBinding:
    create: false
    spec: {}
    annotations: {}
  role:
    create: false
    spec: {}
    annotations: {}
  roleBinding:
    create: false
    spec: {}
    annotations: {}